package euler

object ProjectEuler {
  /*
   * Even Fibonacci numbers
   *
   * Each new term in the Fibonacci sequence is generated by adding the previous
   * two terms. By starting with 1 and 2, the first 10 terms will be:
   *
   * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   *
   * By considering the terms in the Fibonacci sequence whose values do not
   * exceed four million, find the sum of the even-valued terms.
   */
  def problem3(newV:Int, lastV:Int, count:Int):Unit = {
		// alustusarvot problem2(1,0,0)
		var newVal = newV
		var lastVal = lastV
		var temp = newVal
		var countS = count
		if(newVal <= 4000000) {
		  newVal = newVal + lastVal // for example 1 and 0 --> 
		  println(newVal)
		  lastVal = temp
		if(newVal % 2 == 0) {
		  countS = countS + newVal
		  println(countS)
        }
		  problem3(newVal,lastVal,countS)
		}
} 

  /*
   * Largest palindrome product
   *
   * A palindromic number reads the same both ways. The largest palindrome made
   * from the product of two 2-digit numbers is 9009 = 91 × 99.
   *
   * Find the largest palindrome made from the product of two 3-digit numbers.
   *
   */
def problem4(first:Int, second:Int):Int = {
	var calculus = first * second 
	var convert = calculus.toString()
	var secondC = convert.reverse
	if(convert == secondC) {
	  calculus  = convert.toInt
	  println("You got it right")
	}else{
	  println("You got it wrong")
	  calculus = first * second
	}
	println(calculus)
	return calculus
}

  /*
   * Special Pythagorean triplet
   *
   * A Pythagorean triplet is a set of three natural numbers, a < b < c, for
   * which, a^2 + b^2 = c^2
   *
   * For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
   *
   * There exists exactly one Pythagorean triplet for which a + b + c = 1000.
   * Find the product abc.
   */
  def problem9(first:Int, second:Int, third:Int): Int = {
  var returnV = 0
  var a = first * first
  var b = second * second
  var c = third * third
  var sumAB = a + b
  if(sumAB == c) {
    returnV = sumAB
    println("You got it right")
  }else{
    returnV = sumAB
    println("You got it wrong")
  }
  println(returnV)
  return returnV  
}



  /*
   * Maximum path sum I
   *
   * By starting at the top of the triangle below and moving to adjacent numbers
   * on the row below, the maximum total from top to bottom is 23.
   *
   *      3
   *     7 4
   *    2 4 6
   *   8 5 9 3
   *
   * That is, 3 + 7 + 4 + 9 = 23.
   *
   * Find the maximum total from top to bottom of the given triangle with 15
   * rows:
   */
  //Vaiheessa
  def problem18(triangle: List[List[Int]]): Int = {
  var sum = 0
  triangle.map((x) => sum += x.max )
  println(sum)
  return sum
}

  /*
   * Maximum path sum II
   *
   * By starting at the top of the triangle below and moving to adjacent numbers
   * on the row below, the maximum total from top to bottom is 23.
   *
   *    3
   *   7 4
   *  2 4 6
   * 8 5 9 3
   *
   * That is, 3 + 7 + 4 + 9 = 23.
   *
   * Find the maximum total from top to bottom in the given triangle with
   * one-hundred rows.
   *
   * NOTE: This is a much more difficult version of Problem 18. It is not
   * possible to try every route to solve this problem, as there are 2^99
   * altogether! If you could check one trillion (10^12) routes every second it
   * would take over twenty billion years to check them all. There is an
   * efficient algorithm to solve it. ;o)
   */
  def problem67(triangle: List[List[Int]]): Int = ???
}
